import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from collections import Counter

class KNN:
   def __init__(self, master):
    self.master = master
    master.title("Однофакторная линейная регрессия")

    # Фрейм для выбора файла
    file_frame = tk.Frame(master)
    file_frame.pack(pady=10)

    self.file_path = tk.StringVar(value="")
    tk.Label(file_frame, text="Выберите файл данных:").pack(side="left")
    tk.Entry(file_frame, textvariable=self.file_path, width=40).pack(side="left")
    tk.Button(file_frame, text="Обзор", command=self.open_file).pack(side="left")

    # Фрейм для разделения данных
    split_frame = tk.Frame(master)
    split_frame.pack(pady=10)

    tk.Label(split_frame, text="Пропорция разделения (обучение/тест):").pack(side="left")
    self.test_size = tk.DoubleVar(value=0.2)
    tk.Entry(split_frame, textvariable=self.test_size, width=5).pack(side="left")

    # Фрейм для выбора к
    var_frame_k = tk.Frame(master)
    var_frame_k.pack(pady=10)
    self.var_label_k = tk.Label(var_frame_k, text="Выберите значение К:")
    self.var_label_k.pack(side="left")
    # params = ["1", "2", "3"]
    self.var_choice_k = tk.IntVar(value="")
    self.var_dropdown_k = ttk.Combobox(var_frame_k, textvariable=self.var_choice_k, width=10, state="readonly")
    self.var_dropdown_k.pack(side="left")

    # Фрейм для выбора независимой переменной
    var_frame = tk.Frame(master)
    var_frame.pack(pady=10)
    self.var_label = tk.Label(var_frame, text="Выберите класс (Y1- класс 1, Y2- класс 2, Y3- класс 3): ")
    self.var_label.pack(side="left")
    # params = ["1", "2", "3"]
    self.var_choice = tk.StringVar(value="")
    self.var_dropdown = ttk.Combobox(var_frame, textvariable=self.var_choice, width=10, state="readonly")
    self.var_dropdown.pack(side="left")

    # Фрейм для графика
    graph_frame = tk.Frame(master)
    graph_frame.pack(pady=10)
    self.figure = plt.Figure(figsize=(6, 4))
    self.ax = self.figure.add_subplot(111)
    self.canvas = FigureCanvasTkAgg(self.figure, master=graph_frame)
    self.canvas.draw()
    self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    # Фрейм для кнопок
    button_frame = tk.Frame(master)
    button_frame.pack(pady=10)
    tk.Button(button_frame, text="Построить график", command=self.plot_data).pack(side="left")
    tk.Button(button_frame, text="Обучить модель", command=self.train_model).pack(side="left")

    # Фрейм для вывода погрешности
    error_frame = tk.Frame(master)
    error_frame.pack(pady=10)
    self.error_label = tk.Label(error_frame, text="Погрешность модели: ")
    self.error_label.pack()
    

    self.data = None
    self.X_train = None
    self.X_test = None
    self.y_train = None
    self.y_test = None
    self.model = None
    
   def open_file(self):
    file_path = filedialog.askopenfilename(
    initialdir="/", title="Выбрать файл",
    filetypes=(("CSV файлы", "*.csv"), ("Все файлы", "*.*"))
    )
    if file_path:
      self.file_path.set(file_path)
      self.load_data()

   def load_data(self):
    try:
      self.data = pd.read_csv(self.file_path.get(), sep=";", encoding='utf-8')
      print(self.data)
      self.var_dropdown["values"] = ["Y1","Y2","Y3"]
      self.var_dropdown_k["values"] = [3, 5, 7, 9, 11, 13, 15]
      self.plot_data()
    except FileNotFoundError:
      tk.messagebox.showerror("Ошибка", "Файл не найден!")
      return

   def split_data(self):
    independent_var = self.var_choice.get()
    self.X_train = self.data[[independent_var]-1, [independent_var]-2].values.reshape(-1, 1)
    print(self.X_train)
    self.y_train = self.data[independent_var].values
    self.X_test = self.X_train[int(len(self.X_train) * (1 - self.test_size.get())):]
    self.y_test = self.y_train[int(len(self.y_train) * (1 - self.test_size.get())):]
    self.X_train = self.X_train[:int(len(self.X_train) * (1 - self.test_size.get()))]
    self.y_train = self.y_train[:int(len(self.y_train) * (1 - self.test_size.get()))]

   def train_model(self):
    self.split_data()
    self.model = LinearRegression()
    self.model.fit(self.X_train, self.y_train)
    self.calculate_error()
    self.plot_data()

   def calculate_error(self):
    if self.model is not None:
      y_pred = self.model.predict(self.X_test)
      error = np.mean((self.y_test - y_pred) ** 2)
      self.error_label.config(text=f"Погрешность модели: {error:.2f}")

   def plot_data(self):
    self.ax.clear()
    if self.data is not None:
      independent_var = self.var_choice.get()
      self.ax.scatter(self.data[independent_var], self.data[self.data.columns[-1]], label="Данные")
      if self.model is not None:
        x_range = np.linspace(self.X_train.min(), self.X_train.max(), 100)
        y_pred = self.model.predict(x_range.reshape(-1, 1))
        self.ax.plot(x_range, y_pred, color="red", label="Линейная регрессия")
        self.ax.legend()
      self.ax.set_xlabel(independent_var)
      self.ax.set_ylabel(self.data.columns[-1])
      self.ax.set_title("ГРАФИК")
      self.canvas.draw()

class LinearRegression:
  def __init__(self, k):
        self.k = k
        self.X_train = None
        self.y_train = None

  def fit(self, X, y):
        self.X_train = X
        self.y_train = y

  def predict(self, X):
        predictions = []
        for x in X:
            distances = np.linalg.norm(self.X_train - x, axis=1)
            nearest_indices = np.argsort(distances)[:self.k]
            nearest_labels = self.y_train[nearest_indices]
            most_common = Counter(nearest_labels).most_common(1)
            predictions.append(most_common[0][0])
        return np.array(predictions)

root = tk.Tk()
app = KNN(root)
root.mainloop()




/////////////////////////////////
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from collections import Counter

class KNNapp:
   def __init__(self, master):
    self.master = master
    master.title("Метод К-ближайших соседей")

    # Фрейм для выбора файла
    file_frame = tk.Frame(master)
    file_frame.pack(pady=10)

    self.file_path = tk.StringVar(value="")
    tk.Label(file_frame, text="Выберите файл данных:").pack(side="left")
    tk.Entry(file_frame, textvariable=self.file_path, width=40).pack(side="left")
    tk.Button(file_frame, text="Обзор", command=self.open_file).pack(side="left")

    # Фрейм для разделения данных
    split_frame = tk.Frame(master)
    split_frame.pack(pady=10)

    tk.Label(split_frame, text="Пропорция разделения (обучение/тест):").pack(side="left")
    self.test_size = tk.DoubleVar(value=0.2)
    tk.Entry(split_frame, textvariable=self.test_size, width=5).pack(side="left")
  
    # Фрейм для разделения данных
    split_frame_k = tk.Frame(master)
    split_frame_k.pack(pady=10)

    tk.Label(split_frame_k, text="Введите значение К:").pack(side="left")
    self.test_size_k = tk.IntVar()
    tk.Entry(split_frame_k, textvariable=self.test_size_k , width=5).pack(side="left")
    
    # Фрейм для графика
    graph_frame = tk.Frame(master)
    graph_frame.pack(pady=10)
    self.figure = plt.Figure(figsize=(6, 4))
    self.ax = self.figure.add_subplot(111)
    self.canvas = FigureCanvasTkAgg(self.figure, master=graph_frame)
    self.canvas.draw()
    self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    
    # Фрейм для кнопок
    button_frame = tk.Frame(master)
    button_frame.pack(pady=10)
    tk.Button(button_frame, text="Построить график", command=self.split_data).pack(side="left")
    tk.Button(master, text="Показать ближайших соседей", command=self.show_neighbors).pack()
    # tk.Button(button_frame, text="Стереть график", command=self.clear).pack(side="left")
    # tk.Button(button_frame, text="Обучить модель", command=self.train_model).pack(side="left")


    # Фрейм для вывода погрешности
    error_frame = tk.Frame(master)
    error_frame.pack(pady=10)
    self.error_label = tk.Label(error_frame, text="Погрешность модели: ")
    self.test_label = tk.Label(error_frame, text="Тестовая точка: ")
    self.neighbors_label = tk.Label(error_frame, text="Соседи и их классы: ")
    self.error_label.pack()
    
    self.data = None
    self.X_train = None
    self.X_test = None
    self.y_train = None
    self.y_test = None
    self.model = None
    
   def open_file(self):
    file_path = filedialog.askopenfilename(
    initialdir="/", title="Выбрать файл",
    filetypes=(("CSV файлы", "*.csv"), ("Все файлы", "*.*"))
    )
    if file_path:
      self.file_path.set(file_path)
      self.load_data()

   def load_data(self):
    try:
      self.data = pd.read_csv(self.file_path.get(), sep=";", encoding='utf-8')
      print(self.data)
      self.X = self.data[['X1', 'X2']].to_numpy()  # Замените на ваши признаки
      self.y = self.data['Y'].to_numpy() 
      # self.plot_data()
    except FileNotFoundError:
      tk.messagebox.showerror("Ошибка", "Файл не найден!")
      return

   def split_data(self):
     split_index = int(self.test_size.get() * len(self.X))
     self.X_train, self.X_test = self.X[:split_index], self.X[split_index:]
     self.y_train, self.y_test = self.y[:split_index], self.y[split_index:]
     
     knn = KNN(k=self.test_size_k.get())
     knn.fit(self.X_train, self.y_train)
     predictions = knn.predict(self.X_test)
     
     accuracy = np.sum(predictions == self.y_test) / len(self.y_test) * 100
     print(f"Точность для k={self.test_size_k.get()}: {accuracy:.2f}%")
    #  accuracy = np.sum(predictions == self.y_test) / len(self.y_test) * 100
    #  print(f"Точность для k={self.test_size_k.get()}: {accuracy:.2f}%")
     
     self.ax.clear()
     self.ax.scatter(self.X_train[:, 0], self.X_train[:, 1], c=self.y_train, cmap='viridis', label='обучающие данные')
     self.ax.scatter(self.X_test[:10, 0], self.X_test[:10, 1], c='red', label='тестовые данные', marker='x')
     self.ax.set_title('График KNN')
     self.ax.legend()
     self.canvas.draw()
     
   def show_neighbors(self):
        try:
            if self.model is None:
                tk.messagebox.showerror("Ошибка", "Модель не обучена!")
                return

            # Получаем индексы ближайших соседей
            neighbors_indices = self.model.get_nearest_neighbors(self.X_test[15], self.test_size_k.get())  # Замените индекс 0 на нужный
            neighbors = self.X_train[neighbors_indices]
            neighbor_classes = self.y_train[neighbors_indices]

            # Выводим информацию о ближайших соседях
            self.test_label.config(text=f"Тестовая точка: {self.X_test[15]}")
            self.neighbors_label.config(text=f"Соседи и их классы: {list(zip(neighbors, neighbor_classes))}")

            # # Выводим погрешность модели
            # error = 1 - accuracy_score([self.y_test[0]], [prediction])
            # self.error_label.config(text=f"Погрешность модели: {error:.2f}")

            # Выводим график с ближайшими соседями
            self.ax.clear()
            self.ax.scatter(self.X_train[:, 0], self.X_train[:, 1], c=self.y_train, label="Обучающие данные")
            self.ax.scatter(self.X_test[:, 0], self.X_test[:, 1], c=self.y_test, marker="x", label="Тестовые данные")
            self.ax.scatter(neighbors[:, 0], neighbors[:, 1], c=neighbor_classes, marker="o", s=100, label="Ближайшие соседи")
            self.ax.scatter(self.X_test[0, 0], self.X_test[0, 1], c="red", marker="*", s=200, label="Тестовая точка")  # Выделим тестовую точку
            self.ax.legend()
            self.canvas.draw()

        except IndexError:
            tk.messagebox.showerror("Ошибка", "Неверный индекс тестовой точки!")

  #  def clear(self):
  #    self.ax.clear()
     
class KNN:
  def __init__(self, k):
        self.test_size_k = k
        self.X_train = None
        self.y_train = None

  def fit(self, X, y):
        self.X_train = X
        self.y_train = y
  
  def predict(self, X):
        predictions = []
        X = np.array(X, dtype=float)
        for x in X:
            distances = np.linalg.norm(self.X_train - x, axis=1)
            nearest_indices = np.argsort(distances)[:self.test_size_k]
            nearest_labels = self.y_train[nearest_indices]
            most_common = Counter(nearest_labels).most_common(1)
            predictions.append(most_common[0][0]) 
            print(predictions)
        return np.array(predictions)
      
  def get_nearest_neighbors(self, x):
        distances = np.linalg.norm(self.X_train - x, axis=1)
        nearest_indices = np.argsort(distances)[:self.test_size_k]
        nearest_neighbors = self.X_train[nearest_indices]
        nearest_labels = self.y_train[nearest_indices]
        return nearest_neighbors, nearest_labels
root = tk.Tk()
app = KNNapp(root)
root.mainloop()




\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from collections import Counter

class KNNapp:
  def __init__(self, master):
    self.master = master
    master.title("Метод К-ближайших соседей")

    # Фрейм для выбора файла
    file_frame = tk.Frame(master)
    file_frame.pack(pady=10)

    self.file_path = tk.StringVar(value="")
    tk.Label(file_frame, text="Выберите файл данных:").pack(side="left")
    tk.Entry(file_frame, textvariable=self.file_path, width=40).pack(side="left")
    tk.Button(file_frame, text="Обзор", command=self.open_file).pack(side="left")

    # Фрейм для разделения данных
    split_frame = tk.Frame(master)
    split_frame.pack(pady=10)

    tk.Label(split_frame, text="Пропорция разделения (обучение/тест):").pack(side="left")
    self.test_size = tk.DoubleVar(value=0.2)
    tk.Entry(split_frame, textvariable=self.test_size, width=5).pack(side="left")

    # Фрейм для значения K
    split_frame_k = tk.Frame(master)
    split_frame_k.pack(pady=10)

    tk.Label(split_frame_k, text="Введите значение K:").pack(side="left")
    self.k = tk.IntVar(value=3)
    tk.Entry(split_frame_k, textvariable=self.k, width=5).pack(side="left")

    # Фрейм для графика
    graph_frame = tk.Frame(master)
    graph_frame.pack(pady=10)
    self.figure = plt.Figure(figsize=(4, 4))
    self.ax = self.figure.add_subplot(111)
    self.canvas = FigureCanvasTkAgg(self.figure, master=graph_frame)
    self.canvas.draw()
    self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    # Фрейм для кнопок
    button_frame = tk.Frame(master)
    button_frame.pack(pady=10)
    tk.Button(button_frame, text="Построить график", command=self.split_data).pack(side="left")
    tk.Button(master, text="Показать ближайших соседей", command=self.show_neighbors).pack()

    # Фрейм для вывода погрешности
    error_frame = tk.Frame(master)
    error_frame.pack(pady=10)
    # test_frame = tk.Frame(master)
    # test_frame.pack(pady=10)
    neighbor_frame = tk.Frame(master)
    neighbor_frame.pack(pady=10)
    self.error_label = tk.Label(error_frame, text="Погрешность модели: ")
    # self.test_label = tk.Label(test_frame, text="Тестовая точка: ")
    self.neighbors_label = tk.Label(neighbor_frame, text="Соседи и их классы: ")
    self.error_label.pack()
    # self.test_label.pack()
    self.neighbors_label.pack()
    
    self.data = None
    self.X_train = None
    self.X_test = None
    self.y_train = None
    self.y_test = None
    self.model = None

  def open_file(self):
        file_path = filedialog.askopenfilename(
            initialdir="/", title="Выбрать файл",
            filetypes=(("CSV файлы", "*.csv"), ("Все файлы", "*.*"))
        )
        if file_path:
            self.file_path.set(file_path)
            self.load_data()

  def load_data(self):
        try:
            self.data = pd.read_csv(self.file_path.get(), sep=";", encoding='utf-8')
            self.X = self.data[['X1','X2']].to_numpy()  # Замените на ваши признаки
            self.y = self.data['Y'].to_numpy()
        except FileNotFoundError:
            tk.messagebox.showerror("Ошибка", "Файл не найден!")
            return

  def split_data(self):
        try:
            test_size = self.test_size.get()
            if 0 < test_size < 1:
                # Разделение данных без sklearn
                n = len(self.X)
                split_index = int(test_size * n)
                self.X_train = self.X[:split_index]
                self.X_test = self.X[split_index:]
                self.y_train = self.y[:split_index]
                self.y_test = self.y[split_index:]
                print(self.X_test)
                print(self.X_train)
                print(self.y_train)
                self.train_model()
                self.plot_data()
                # self.show_neighbors()
            else:
                tk.messagebox.showerror("Ошибка", "Неверный размер тестовой выборки!")
        except ValueError:
            tk.messagebox.showerror("Ошибка", "Неверный формат размера тестовой выборки!")

  def train_model(self):
        # Функция для обучения модели KNN (вызов функции KNN)
        self.model = KNN(k=self.k.get())
        self.model.fit(self.X_train, self.y_train)

  def plot_data(self):
         self.ax.clear()
         self.ax.scatter(self.X_train[:, 0], self.X_train[:, 1], c=self.y_train, label="Обучающие данные")
         self.ax.scatter(self.X_test[:, 0], self.X_test[:, 1], c=self.y_test, marker="x", label="Опорные точки")
         self.ax.legend()
         self.canvas.draw()

  def show_neighbors(self):
        try:
            if self.model is None:
                tk.messagebox.showerror("Ошибка", "Модель не обучена!")
                return
            for i in range(len(self.X_test)):
                test_point = self.X_test[i]
                # Получаем индексы ближайших соседей
                neighbors_indices = self.model.find_nearest_neighbors(test_point, self.k.get())  # Замените индекс 0 на нужный
                neighbors = self.X_train[neighbors_indices]
                neighbor_classes = self.y_train[neighbors_indices]

            # Выводим информацию о ближайших соседях
                # self.test_label.config(text=f"Тестовая точка: {self.X_test}")
                self.neighbors_label.config(text=f"Соседи и их классы: {list(zip(neighbors, neighbor_classes))}")

            # Вычисляем прогноз для тестовой точки
                prediction = self.model.predict(test_point)

            # Вычисляем погрешность модели
                error = 1 - self.calculate_accuracy([self.y_test[i]], [prediction])  # Используем calculate_accuracy
                self.error_label.config(text=f"Погрешность модели: {error:.2f}")

            # Выводим график с ближайшими соседями
                self.ax.clear()
                self.ax.scatter(self.X_train[:, 0], self.X_train[:, 1], c=self.y_train, label="Обучающие данные")
                self.ax.scatter(self.X_test[:, 0], self.X_test[:, 1], c=self.y_test, marker="x", label="Опорные точки")
                self.ax.scatter(neighbors[:, 0], neighbors[:, 1], c=neighbor_classes, marker="o", s=100, label="Ближайшие соседи")
            # self.ax.scatter(self.X_test[:, 0], self.X_test[:, 1], c="red", marker="*", s=200, label="Тестовая точка")  # Выделим тестовую точку
                self.ax.legend()
                self.canvas.draw()

        except IndexError:
            tk.messagebox.showerror("Ошибка", "Неверный индекс тестовой точки!")

  def calculate_accuracy(self, y_true, y_pred):
  
    correct_predictions = sum(1 for i in range(len(y_true)) if y_true[i] == y_pred[i])
    return correct_predictions / len(y_true)

class KNN:
    def __init__(self, k):
        self.k = k

    def fit(self, X, y):
        self.X_train = X
        self.y_train = y

    def find_nearest_neighbors(self, test_point, k):
        #  distances = np.sqrt(np.sum((self.X_train - test_point) ** 2))
        distances = np.linalg.norm(self.X_train - test_point, axis=1)
        nearest_neighbors_indices = np.argsort(distances)[:k]
        return nearest_neighbors_indices

    def predict(self, test_point):
        neighbors_indices = self.find_nearest_neighbors(test_point, self.k)
        neighbor_classes = self.y_train[neighbors_indices]
        # Выбрать класс, который встречается чаще всего
        prediction = Counter(neighbor_classes).most_common(1)[0][0]
        return prediction

if __name__ == "__main__":
    root = tk.Tk()
    app = KNNapp(root)
    root.mainloop()

